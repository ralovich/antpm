name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        os:
          - macos-latest
          - ubuntu-latest
          - ubuntu-20.04
          - macos-13
        # https://stackoverflow.com/a/68940067
        compiler: [ {cpp: g++, c: gcc}, {cpp: clang++, c: clang} ]
      fail-fast: false
    continue-on-error: ${{ matrix.os == 'macOS' && matrix.compiler.c == 'gcc' }}
      
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    #timeout-minutes: 10

    steps:
    - name: Build system ID
      run: |
        echo ${{ runner.arch }}
        uname -a

    - name: Install APT build-deps
      if: runner.os == 'Linux'
      run: sudo apt-get install -y pkg-config libusb-1.0-0-dev libxml2-dev libboost-dev libboost-exception-dev libboost-program-options-dev libboost-test-dev  valgrind clang

    - name: Install Homebrew build-deps
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config libusb cmake ninja boost libxml2 gcc@14
        brew info gcc
        brew --prefix gcc
        #brew ls -v gcc
        file `brew --prefix gcc`
        which g++-14
        file `which g++-14`
        g++-14  || true
        #`brew --prefix gcc` -v
        echo "before find..."
        #find /usr -name "gcc*" || true
        #find /opt -name "gcc*" || true
        echo "ABC"
        #find `brew --prefix gcc` -name "gcc" || true
        echo "after find..."
        ls -lasR `brew --prefix gcc` || true
    
    - uses: actions/checkout@v3

    - name: Configure CMake
      env:
        CC:   ${{ runner.os == 'macOS' && matrix.compiler.c == 'gcc' && 'gcc-14' || matrix.compiler.c }}
        CXX:  ${{ runner.os == 'macOS' && matrix.compiler.cpp == 'g++' && 'g++-14' || matrix.compiler.cpp }}
        CXXFLAGS: ${{ runner.os == 'macOS' && matrix.compiler.cpp == 'g++' && '-lstdc++' || '' }}
        #CC:   ${{ matrix.compiler.c }}
        #CXX:  ${{ matrix.compiler.cpp }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/src -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_BOOST_TEST=TRUE -DUSE_GANT=TRUE

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure -j 4 --timeout 120

